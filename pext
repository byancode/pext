#!/usr/bin/env php
<?php

require_once __DIR__.'/vendor/autoload.php';

use Swoole\Http\Server;
use Swoole\Http\Request;
use Pext\Engine\Context;
use Swoole\Http\Response;

function __(string $text): string
{
    return $text;
}


function find_files(string $name): array
{
    $path = __DIR__ . DIRECTORY_SEPARATOR . $name;
    $directory = new RecursiveDirectoryIterator($path);
    $filter    = new RecursiveFilterIteratorCustom($directory);
    $iterator  = new RecursiveIteratorIterator($filter);

    return array_map(function ($fileInfo) {
        return $fileInfo->getPathname();
    }, iterator_to_array($iterator));
}

class RecursiveFilterIteratorCustom extends RecursiveFilterIterator
{
    public function accept(): bool
    {
        if ($this->current()->isDir()) {
            return !in_array($this->current()->getFilename(), ['.git', 'vendor', '.', '..', '.phan']);
        }

        return preg_match('/\.php$/', $this->current()->getFilename()) !== false;
    }
}


$server = new Server("127.0.0.1", 9501);

// Triggered when the HTTP Server starts, connections are accepted after this callback is executed
$server->on("Start", function(Server $server)
{
    echo "Server started at http://127.0.0.1:9501" . PHP_EOL;
});

// The main HTTP server request callback event, entry point for all incoming HTTP requests
$server->on('Request', function(
    Request $request,
    Response $response,
) {
    $pages   = find_files('pages');
    $context = new Context(
        $request, $response,
    );

    foreach ($pages as $file) {
        /** @var \Pext\Engine\Page */
        $page = require $file;
        $page->setContext($context);

        if ($page->match($request)) {
            $response->end($page);
            return;
        }
    }

    $response->status(404);
    $response->end();
});

// Triggered when the server is shutting down
$server->on("Shutdown", function($server, $workerId)
{
    echo "Server is shutting down" . PHP_EOL;
});

// Triggered when worker processes are being stopped
$server->on("WorkerStop", function($server, $workerId)
{
    echo "Worker $workerId is stopping" . PHP_EOL;
});

$server->start();